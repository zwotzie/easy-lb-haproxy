global
    log /dev/log    local0
    log /dev/log    local1 notice

defaults
    log    global
    mode    http
    option    httplog
    option    dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000

    {{ if (getenv "HAPROXY_STATS") }}
    stats    enable
    stats    realm Haproxy\ Statistics
    {{ if (getenv "HAPROXY_STATS_URI") }}
    stats    {{ getenv "HAPROXY_STATS_URI" }}
    {{ else }}
    stats    uri /stats
    {{ end }}
    {{ if (getenv "HAPROXY_STATS_AUTH") }}
    stats    auth {{ getenv "HAPROXY_STATS_AUTH" }}
    {{ end }}
    stats    refresh 5s
    {{ end }}

frontend http_frontend
    bind *:80
    {{ range $service := ls "/haproxy" }}
    {{ if ls (printf "/haproxy/%s/upstream" $service) }}
    acl {{ $service }}_acl path_beg {{ if exists (printf "/haproxy/%s/location" $service) }}{{ getv (printf "/haproxy/%s/location" $service) }}{{ else }}/{{ $service }}{{ end }}
    {{ if exists (printf "/haproxy/%s/location" $service) }}
    {{ if eq (getv (printf "/haproxy/%s/location" $service)) "/" }}
    default_backend {{ $service }}_backend
    {{ else }}
    use_backend {{ $service }}_backend if {{ $service }}_acl
    {{ end }}
    {{ else }}
    use_backend {{ $service }}_backend if {{ $service }}_acl
    {{ end }}
    {{ end }}
    {{ end }}

{{ range $service := ls "/haproxy" }}
{{ if ls (printf "/haproxy/%s/upstream" $service) }}
backend {{ $service }}_backend
    {{ if ls (printf "/haproxy/%s/backend" $service) }}
    {{ range $option := ls (printf "/haproxy/%s/backend" $service) }}
    {{ $option }} {{ getv (printf "/haproxy/%s/backend/%s" $service $option) }}
    {{ end }}
    {{ else }}
    balance roundrobin
    {{ end }}
    {{ range $server := ls (printf "/haproxy/%s/upstream" $service) }}
    server {{ $server }} {{ getv (printf "/haproxy/%s/upstream/%s" $service $server) }} check
    {{ end }}
{{ end }}
{{ end }}
